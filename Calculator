import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class CalculatorApp {
    public static void main(String[] args) {
        // Create JFrame for the calculator window
        JFrame frame = new JFrame("Calculator");
        frame.setSize(400, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());

        // Text field at the top to display inputs and results
        JTextField textField = new JTextField();
        textField.setFont(new Font("Arial", Font.BOLD, 24));
        textField.setHorizontalAlignment(JTextField.RIGHT);
        textField.setEditable(true); // Allow editing until result is shown
        frame.add(textField, BorderLayout.NORTH);

        // Panel to hold calculator buttons
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(4, 4, 10, 10)); // 4x4 grid layout for buttons
        frame.add(buttonPanel, BorderLayout.CENTER);

        // Button labels
        String[] buttons = {
            "7", "8", "9", "+",
            "4", "5", "6", "-",
            "1", "2", "3", "*",
            "C", "0", "=", "/"
        };

        // Add buttons to the panel
        for (String text : buttons) {
            JButton button = new JButton(text);
            button.setFont(new Font("Arial", Font.BOLD, 20));

            // Button action listener
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String command = e.getActionCommand();

                    // Clear button: Reset text field
                    if (command.equals("C")) {
                        textField.setText("");
                        textField.setEditable(true); // Re-enable editing after clearing
                    }
                    // Equals button: Perform the calculation and disable further input
                    else if (command.equals("=")) {
                        try {
                            // Evaluate the expression and show result
                            String result = String.valueOf(eval(textField.getText()));
                            textField.setText(result);
                            textField.setEditable(false); // Disable further input until cleared
                        } catch (Exception ex) {
                            textField.setText("Error"); // If there's an error, show "Error"
                            textField.setEditable(true); // Re-enable editing if error occurs
                        }
                    }
                    // Any other button: Append the button text to the text field if not in result state
                    else {
                        if (!textField.getText().equals("Error") && !textField.getText().equals("0")) {
                            textField.setText(textField.getText() + command);
                        } else {
                            textField.setText(command); // Reset for fresh input after error or zero
                        }
                    }
                }
            });

            // Add button to the panel
            buttonPanel.add(button);
        }

        // Make the frame visible
        frame.setVisible(true);
    }

    // Function to evaluate mathematical expressions using JavaScript engine
    public static double eval(String expression) {
        try {
            // Use JavaScript engine to evaluate the expression
            javax.script.ScriptEngineManager manager = new javax.script.ScriptEngineManager();
            javax.script.ScriptEngine engine = manager.getEngineByName("JavaScript");
            return (double) engine.eval(expression);
        } catch (Exception e) {
            // Handle any parsing or evaluation errors
            return Double.NaN; // Return NaN for invalid expressions
        }
    }
}

